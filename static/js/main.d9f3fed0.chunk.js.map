{"version":3,"sources":["contacts/contact.js","contacts/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contact","props","className","firstName","lastName","phone","gender","contactsMock","id","Contacts","state","contacts","search","updateSearch","event","setState","target","value","filteredContacts","this","filter","user","toLowerCase","indexOf","onChange","bind","map","contact","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAkBeA,G,MAhBC,SAACC,GAAD,OACZ,yBAAKC,UAAU,WACP,yBAAKA,UAAU,gBACX,8BACKD,EAAME,UADX,IACuBF,EAAMG,WAGrC,yBAAKF,UAAU,iBACVD,EAAMI,OAEX,yBAAKH,UAAU,kBACVD,EAAMK,WCTbC,EAAe,CAAC,CACdJ,UAAW,uCACXC,SAAU,2EACVC,MAAO,gBACPC,OAAQ,OACRE,GAAI,GACL,CACCL,UAAW,iCACXC,SAAU,+DACVC,MAAO,gBACPC,OAAQ,SACRE,GAAI,GACL,CACCL,UAAW,yDACXC,SAAU,mDACVC,MAAO,gBACPG,GAAI,GACL,CACCL,UAAW,iCACXC,SAAU,mDACVC,MAAO,gBACPC,OAAQ,SACRE,GAAI,GACL,CACCL,UAAW,uCACXC,SAAU,yDACVC,MAAO,gBACPC,OAAQ,OACRE,GAAI,GACL,CACCL,UAAW,uCACXC,SAAU,6CACVC,MAAO,gBACPC,OAAQ,OACRE,GAAI,IAGaC,E,4MACjBC,MAAQ,CACJC,SAAS,GAAD,OAAMJ,GACdK,OAAQ,I,EAGZC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACH,OAAQE,EAAME,OAAOC,S,uDAG/B,IAAD,OACAC,EAAmBC,KAAKT,MAAMC,SAASS,QACvC,SAACC,GAGG,QAFmF,IAA3EA,EAAKlB,UAAUmB,cAAcC,QAAQ,EAAKb,MAAME,OAAOU,kBACmB,IAA1ED,EAAKjB,SAASkB,cAAcC,QAAQ,EAAKb,MAAME,OAAOU,mBAItE,OACI,yBAAKpB,UAAU,oBACf,2BACI,2BAAOe,MAAOE,KAAKT,MAAME,OAAQY,SAAUL,KAAKN,aAAaY,KAAKN,SAErED,EAAiBQ,KAAI,SAACC,GACnB,OACI,kBAAC,EAAD,CAASxB,UAAWwB,EAAQxB,UAAWC,SAAUuB,EAAQvB,SAAUC,MAAOsB,EAAQtB,MAAOC,OAAQqB,EAAQrB,iB,GAzBvFsB,aC5B3BC,E,uKARP,OACI,6BACI,kBAAC,EAAD,W,GAJEC,IAAMF,WCSJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d9f3fed0.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nconst Contact = (props) => (\r\n    <div className=\"contact\">\r\n            <div className=\"contact-name\">\r\n                <span>\r\n                    {props.firstName} {props.lastName}\r\n                </span>\r\n            </div>\r\n        <div className=\"contact-phone\">\r\n            {props.phone}\r\n        </div>\r\n        <div className=\"contact-gender\">\r\n            {props.gender}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Contact;","import React, {Component} from \"react\";\r\nimport \"./contacts.css\";\r\nimport Contact from \"./contact.js\";\r\n\r\nconst contactsMock = [{\r\n        firstName: \"Барней\",\r\n        lastName: \"Стинсовський\",\r\n        phone: \"+380956319521\",\r\n        gender: \"male\",\r\n        id: 1\r\n    }, {\r\n        firstName: \"Робін\",\r\n        lastName: \"Щербатська\",\r\n        phone: \"+380931460123\",\r\n        gender: \"female\",\r\n        id: 2\r\n    }, {\r\n        firstName: \"Анонімний\",\r\n        lastName: \"Анонімус\",\r\n        phone: \"+380666666666\",\r\n        id: 3\r\n    }, {\r\n        firstName: \"Лілія\",\r\n        lastName: \"Олдровна\",\r\n        phone: \"+380504691254\",\r\n        gender: \"female\",\r\n        id: 4\r\n    }, {\r\n        firstName: \"Маршен\",\r\n        lastName: \"Еріксонян\",\r\n        phone: \"+380739432123\",\r\n        gender: \"male\",\r\n        id: 5\r\n    }, {\r\n        firstName: \"Теодор\",\r\n        lastName: \"Мотсбес\",\r\n        phone: \"+380956319521\",\r\n        gender: \"male\",\r\n        id: 6\r\n    }];\r\n\r\n    export default class Contacts extends Component{\r\n        state = {\r\n            contacts: [...contactsMock],\r\n            search: ''\r\n        }\r\n\r\n        updateSearch = (event) => {\r\n            this.setState({search: event.target.value});\r\n        }\r\n\r\n        render(){\r\n            let filteredContacts = this.state.contacts.filter(\r\n                (user) => {\r\n                    let a = user.firstName.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;\r\n                    let b = user.lastName.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;\r\n                    return a + b;\r\n                }\r\n            );\r\n            return(\r\n                <div className=\"contacts-wrapper\">\r\n                <p>\r\n                    <input value={this.state.search} onChange={this.updateSearch.bind(this)}/>\r\n                </p>\r\n                {filteredContacts.map((contact) => {\r\n                    return(\r\n                        <Contact firstName={contact.firstName} lastName={contact.lastName} phone={contact.phone} gender={contact.gender}/>\r\n                    )\r\n                })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n","import React from 'react';\nimport Contacts from './contacts/contacts.js';\n\nclass App extends React.Component {\n    render(){\n        return(\n            <div>\n                <Contacts />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}